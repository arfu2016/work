192.30.253.112 github.com
151.101.184.133 assets-cdn.github.com
151.101.185.194 github.global.ssl.fastly.net

github arfu2016:
chat_cn 
origin/master

arfu.guo@gmail.com:
CubeGirl 
origin/develop_deco
origin/deco_MLP_model
origin/MLP_model_deco
origin/parse_tree

git clone url

git log

q

Exiting git log
To stop viewing git log output, press q (which stands for quit).

git diff 1 2

q

git config --global color.ui auto

git checkout 1

git init # to create a repository

git status # the status of the working directory

git add 1 # add file the staging area

git add . # 把当前文件夹中所有文件都添加进去？

git commit
git commit -m "Commit message"

git commit -m 'Consctruct Crawler, Searcher and web server'

git diff # difference between working directory and staging area
git diff —-staged # difference between staging area and repository

git reset —-hard # remove everything in working directory and staging area. You can’t get the changes back

git checkout master

git branch
git branch no-class
git branch

git checkout no-class

git log --graph --oneline master coins

git checkout -b new_branch_name
git branch new_branch_name
git checkout new_branch_name

git gc #collect useless commits，回收没用的commit

git checkout branch1
git merge branch2
git merge branch1 branch2

git branch -m new-name

git show 1
git diff commit1 commit2

git branch -d 2

git log --graph --oneline

You might want to use pencil and paper, or create a text file with stars and dashes similar to the output of git log --graph, or maybe use an online diagramming tool like gliffy or yUML. 

git checkout easy-mode
git merge master easy-mode

<<<<<<< HEAD
||||||| merged common ancestors
=======
      this.breakIntoFragments();
>>>>>>> master

git add …
git commit

git status
both modified

git log -n 1
#git log will only show n commits (in this case it is 1 commit)

git diff branch1 branch2 #?
git log branch1 #?

git remote
git remote add origin https://github.com/arfu2016/handlehand.git
git remote add upstream …

git remote -v #check the remote repository

git push origin master

git branch
git remote
git pull origin master
git log

git pull origin master
git fetch origin
git merge master origin/master

git remote set-url origin git://new.url.here
git remote set-url origin git@github.com:<Username>/<Project>.git
git remote set-url origin git@115.159.117.83:guojianfu/we-chat.git

git config --global user.name "arfu"
git config --global user.email arfu.guo@gmail.com

git config --global user.email "arfu.guo@gmail.com"

git commit --amend --reset-author

git push origin master
Username for 'https://github.com': mediaProduct2017
Password for 'https://mediaProduct2017@github.com': 

git rm --cached FILENAME 取消track a file，同时从github中删除，local文件保留（--cached很重要）
git rm -r --cached . 当前文件夹全部取消track
git rm -r --cached folder 某个文件夹全部取消track

git add . 当前文件夹重新加入stage

git reset HEAD <file> 取消已经stage的结果，重新回到word directory的状态

git rm dataAnalysis.ipynb
git rm file 删除文件（可能要到最后一次更新该文件的commit才能找到）
Use git rm foo to stage the file for deletion

git remote remove origin

# Changes not staged for commit:
#   (use "git add <file>..." to update what will be committed)
#   (use "git checkout -- <file>..." to discard changes in working directory)

# Changes to be committed:
#   (use "git reset HEAD <file>..." to unstage)

git add news/ news文件夹全部加入stage

git reset HEAD~

git reset --hard HEAD~

First, it's always worth noting that git reset --hard is a potentially dangerous command, since it throws away all your uncommitted changes. For safety, you should always check that the output of git status is clean (that is, empty) before using it.

If you do git reset --hard <SOME-COMMIT> then Git will:
Make your current branch (typically master ) back to point at <SOME-COMMIT> .
Then make the files in your working tree and the index ("staging area") the same as the versions committed in <SOME-COMMIT> .

$ git reset --hard HEAD~3  # Go back in time, throwing away changes
$ git reset --soft HEAD~3  # Set HEAD to point to an earlier commit
$ git reset --hard  # Wipe out differences in the working tree

as long as you did not commit you can type
git merge --abort

git update-index --assume-unchanged <file>
git update-index --assume-unchanged SourceCode/Daka/chatbot/logic/text_table/data/
git commit -a -m ' '
git commit -a


git update-index --no-assume-unchanged <file>

git checkout --ours index.html
git checkout --theirs _layouts/default.html

git checkout . - Removes Unstaged Tracked files ONLY [Type 2]
git clean -f - Removes Unstaged UnTracked files ONLY [Type 3]
git reset --hard - Removes Staged Tracked and UnStaged Tracked files ONLY[Type 1, Type 2]
git stash -u - Removes all changes [Type 1, Type 2, Type 3]

git clean -f file

You can undo changes to tracked files with:
git reset HEAD --hard

You can remove untracked files with:
git clean -f

You can remove untracked files and directories with:
git clean -fd
but you can't undo change to untracked files.

You can remove ignored and untracked files and directories
git clean -fdx
but you can't undo change to ignored files.

git checkout --track origin/release


Changes to be committed:
  (use "git rm --cached <file>..." to unstage)

git remote add origin https://github.com/arfu2016/nlp.git
git push -u origin master
# -u建立本地与远程的对应关系，之后可以直接用git push

git branch --sort=-committerdate  # DESC
git branch --sort=committerdate  # ASC


