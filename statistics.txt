对于t-test，首先要明确t分布，t分布需要两个参数，一是自由度，二是t值。t分布类似正态分布，是对称的，在0的两侧，但又不同于正态分布的曲线。

如果样本符合正态分布（如果看上去是log normal，不妨就取log），均值为m，样本标准差为s，样本数为n，那么，m/(s/sqrt(n)))就是一个t statistic，符合t分布。

p value是错误拒绝假设的概率，阈值一般取0.05，如果是多次检测，最简单的处理办法是给0.05除以次数，作为阈值。

t-test常用于检验样本均值是否显著不等于某个值，一般是双边检验，阈值是0.05的话，两边各分到0.025，可以算出对应的t值。或者，根据检验的t值，算出单侧对应的面积，p value就是单侧对应的面积乘以2.

如果确定样本均值肯定大于要检验的值，那么t值的分布就只在t分布的右半边（单边检验），这时候，阈值是0.05的话，就都分到右侧，可以算出对应的t值。

如果两个样本都符合正态分布，存在一个t statistic，可以由他们的均值、方差、样本数算出来。这个t statistic可以用来检验这两个样本均值是否相等。

如果两个样本的样本点完全对应，也就是形成一个两行多列的表格，那么也可以检验均值是否相等，通过对应点相减，可以转化为单样本问题。如果是这种情况，采用单样本检验要比采用两样本检验更加精确。

T-test and KS-test
https://docs.scipy.org/doc/scipy/reference/tutorial/stats.html#t-test-and-ks-test

import pandas as pd
import numpy as np
import scipy.stats as stats

def analyze_returns(net_returns):
    """
    Perform a t-test, with the null hypothesis being that the mean return is zero.
    
    Parameters
    ----------
    net_returns : Pandas Series
        A Pandas Series for each date
    
    Returns
    -------
    t_value
        t-statistic from t-test
    p_value
        Corresponding p-value
    """
    # TODO: Perform one-tailed t-test on net_returns
    # Hint: You can use stats.ttest_1samp() to perform the test.
    #       However, this performs a two-tailed t-test.
    #       You'll need to divde the p-value by 2 to get the results of a one-tailed p-value.
    null_hypothesis = 0.0
    t, p = stats.ttest_1samp(net_returns, 0)
    
    return t, p/2
    
def test_run(filename='net_returns.csv'):
    """Test run analyze_returns() with net strategy returns from a file."""
    net_returns = pd.Series.from_csv(filename, header=0)
    t, p = analyze_returns(net_returns)
    print("t-statistic: {:.3f}\np-value: {:.6f}".format(t, p))


if __name__ == '__main__':
    test_run()
